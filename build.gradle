buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories { jcenter() }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"

        // Documentation
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.3")
        // A swagger to asciidoctor converter to combine hand-written docs with auto-generated docs.
        classpath 'io.github.swagger2markup:swagger2markup-spring-restdocs-ext:1.3.3'
        classpath 'io.github.swagger2markup:swagger2markup-gradle-plugin:1.3.3'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'io.github.swagger2markup'
apply plugin: 'war'


sourceCompatibility = 1.8
targetCompatibility = sourceCompatibility

jar {
    baseName 'netflix-example-project'
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    asciiDocInputDir = file('src/main/docs/asciidoc')
    asciiDocOutputDir = file("${buildDir}/asciidoc/generated")
    swaggerOutputDir = file("${buildDir}/swagger")
    snippetsOutputDir = file("${buildDir}/generated-snippets")
    springfoxVersion = '3.0.0-SNAPSHOT'
}

dependencies {
    // Spring Boot
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-web')

    // Documentation
    implementation "io.springfox:springfox-swagger2:${springfoxVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springfoxVersion}"
    implementation "io.springfox:springfox-data-rest:${springfoxVersion}"

    // Currency Utility
    implementation "org.javamoney:moneta:0.9"

    // In-Memory DB
    runtimeOnly('com.h2database:h2')

    // Auto-generates boilerplate Java bytecode
    compileOnly('org.projectlombok:lombok')

    // google utility libraries
    implementation group: 'com.google.guava', name: 'guava', version: '11.0.2'
//    implementation group: 'com.google.code', name: 'gson', version: '2.7'

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
}

test {
    systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
    systemProperty 'io.springfox.staticdocs.snippetsOutputDir', snippetsOutputDir
}

convertSwagger2markup {
    dependsOn test
    swaggerInput "${swaggerOutputDir}/swagger.json"
    outputDir asciiDocOutputDir
    config = [
            'swagger2markup.pathsGroupedBy'                          : 'TAGS',
            'swagger2markup.extensions.springRestDocs.snippetBaseUri': snippetsOutputDir.getAbsolutePath()]
}


asciidoctor {
    dependsOn convertSwagger2markup
    inputs.dir snippetsOutputDir
    sourceDir asciiDocInputDir
    backends = ['html5']
    attributes = [
            doctype    : 'book',
            numbered   : '',
            sectanchors: '',
            sectlinks: '',
            generated  : asciiDocOutputDir
    ]
}

bootWar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}


task stage(type: Copy, dependsOn: [build, bootWar]) {
    from war.archivePath
    into project.rootDir
    rename {
        "target/${jar.baseName}.war"
    }
}

stage.mustRunAfter(clean)

clean << {
    project.file("target/${jar.baseName}.war").delete()
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8.1'
}